/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.skyhigh.storeapi.controller;

import com.skyhigh.storeapi.model.dto.ModelApiResponse;
import com.skyhigh.storeapi.model.dto.ProductDto;
import com.skyhigh.storeapi.model.dto.ProductResponseDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-16T20:13:57.830681+05:30[Asia/Colombo]")
@Validated
@Tag(name = "product", description = "Everything about Product")
public interface ProductApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /product : Add a new Product to the app
     * Add a new Product to the app
     *
     * @param productDto Create a new Product to the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addProduct",
        summary = "Add a new Product to the app",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponseDto.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProductResponseDto.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/product",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<ProductResponseDto> addProduct(
        @Parameter(name = "ProductDto", description = "Create a new Product to the app", required = true) @Valid @RequestBody ProductDto productDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"photoUrl\", \"productId\" : 10, \"category\" : { \"photoUrl\" : \"photoUrl\", \"parentCategoryId\" : 10, \"categoryName\" : \"Engine Oil, Break Oil\", \"categoryId\" : 10, \"status\" : \"ACTIVE\" }, \"brand\" : { \"photoUrl\" : \"Lubricants\", \"brandName\" : \"Lubricants\", \"brandId\" : 10, \"status\" : \"ACTIVE\" }, \"productName\" : \"Dot 3, Dot 4\", \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<ProductResponseDto> <productId>10</productId> <productName>Dot 3, Dot 4</productName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </ProductResponseDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /product/{productId} : Deletes a Product
     * delete a Product
     *
     * @param productId Product id to delete (required)
     * @param apiKey  (optional)
     * @return Invalid Product value (status code 400)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Deletes a Product",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid Product value")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/product/{productId}"
    )
    default ResponseEntity<Void> deleteProduct(
        @Parameter(name = "productId", description = "Product id to delete", required = true) @PathVariable("productId") Long productId,
        @Parameter(name = "api_key", description = "") @RequestHeader(value = "api_key", required = false) String apiKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product/findByStatus : Finds Product by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (optional, default to ACTIVE)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "findProductByStatus",
        summary = "Finds Product by status",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponseDto.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProductResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/findByStatus",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<ProductResponseDto>> findProductByStatus(
        @Parameter(name = "status", description = "Status values that need to be considered for filter") @Valid @RequestParam(value = "status", required = false, defaultValue = "ACTIVE") String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"photoUrl\", \"productId\" : 10, \"category\" : { \"photoUrl\" : \"photoUrl\", \"parentCategoryId\" : 10, \"categoryName\" : \"Engine Oil, Break Oil\", \"categoryId\" : 10, \"status\" : \"ACTIVE\" }, \"brand\" : { \"photoUrl\" : \"Lubricants\", \"brandName\" : \"Lubricants\", \"brandId\" : 10, \"status\" : \"ACTIVE\" }, \"productName\" : \"Dot 3, Dot 4\", \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<ProductResponseDto> <productId>10</productId> <productName>Dot 3, Dot 4</productName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </ProductResponseDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product/{productId} : Find Product by ID
     * Returns a single Product
     *
     * @param productId ID of Product to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Product not found (status code 404)
     */
    @Operation(
        operationId = "getProductById",
        summary = "Find Product by ID",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponseDto.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProductResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Product not found")
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/{productId}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<ProductResponseDto> getProductById(
        @Parameter(name = "productId", description = "ID of Product to return", required = true) @PathVariable("productId") Long productId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"photoUrl\", \"productId\" : 10, \"category\" : { \"photoUrl\" : \"photoUrl\", \"parentCategoryId\" : 10, \"categoryName\" : \"Engine Oil, Break Oil\", \"categoryId\" : 10, \"status\" : \"ACTIVE\" }, \"brand\" : { \"photoUrl\" : \"Lubricants\", \"brandName\" : \"Lubricants\", \"brandId\" : 10, \"status\" : \"ACTIVE\" }, \"productName\" : \"Dot 3, Dot 4\", \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<ProductResponseDto> <productId>10</productId> <productName>Dot 3, Dot 4</productName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </ProductResponseDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /product : Update an existing Product
     * Update an existing Product by Id
     *
     * @param productDto Update an existent Product in the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Product not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update an existing Product",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponseDto.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProductResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Product not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/product",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<ProductResponseDto> updateProduct(
        @Parameter(name = "ProductDto", description = "Update an existent Product in the app", required = true) @Valid @RequestBody ProductDto productDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"photoUrl\", \"productId\" : 10, \"category\" : { \"photoUrl\" : \"photoUrl\", \"parentCategoryId\" : 10, \"categoryName\" : \"Engine Oil, Break Oil\", \"categoryId\" : 10, \"status\" : \"ACTIVE\" }, \"brand\" : { \"photoUrl\" : \"Lubricants\", \"brandName\" : \"Lubricants\", \"brandId\" : 10, \"status\" : \"ACTIVE\" }, \"productName\" : \"Dot 3, Dot 4\", \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<ProductResponseDto> <productId>10</productId> <productName>Dot 3, Dot 4</productName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </ProductResponseDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /product/{productId} : Updates a Product in the app with form data
     * 
     *
     * @param productId ID of Product to return (required)
     * @param productName Name of Product that needs to be updated (optional)
     * @param status Status of Product that needs to be updated (optional)
     * @return Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateProductWithForm",
        summary = "Updates a Product in the app with form data",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/product/{productId}"
    )
    default ResponseEntity<Void> updateProductWithForm(
        @Parameter(name = "productId", description = "ID of Product to return", required = true) @PathVariable("productId") Long productId,
        @Parameter(name = "productName", description = "Name of Product that needs to be updated") @Valid @RequestParam(value = "productName", required = false) String productName,
        @Parameter(name = "status", description = "Status of Product that needs to be updated") @Valid @RequestParam(value = "status", required = false) String status
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /product/{productId}/uploadImage : uploads an image
     * 
     *
     * @param productId ID of product to update (required)
     * @param additionalMetadata Additional Metadata (optional)
     * @param body  (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "uploadProductFile",
        summary = "uploads an image",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/product/{productId}/uploadImage",
        produces = { "application/json" },
        consumes = { "application/octet-stream" }
    )
    default ResponseEntity<ModelApiResponse> uploadProductFile(
        @Parameter(name = "productId", description = "ID of product to update", required = true) @PathVariable("productId") Long productId,
        @Parameter(name = "additionalMetadata", description = "Additional Metadata") @Valid @RequestParam(value = "additionalMetadata", required = false) String additionalMetadata,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) org.springframework.core.io.Resource body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"type\" : \"type\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
