/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.skyhigh.storeapi.controller;

import com.skyhigh.storeapi.model.dto.BatchDto;
import com.skyhigh.storeapi.model.dto.BatchResponseDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-17T22:49:14.789018+05:30[Asia/Colombo]")
@Validated
@Tag(name = "batch", description = "Everything about Batch")
public interface BatchApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /batch : Add a new Batch to the app
     * Add a new Batch to the app
     *
     * @param batchDto Create a new Batch to the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
            operationId = "addBatch",
            summary = "Add a new Batch to the app",
            tags = { "batch" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = BatchResponseDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = BatchResponseDto.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Invalid input")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/batch",
            produces = { "application/json", "application/xml" },
            consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<BatchResponseDto> addBatch(
            @Parameter(name = "BatchDto", description = "Create a new Batch to the app", required = true) @Valid @RequestBody BatchDto batchDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"batchName\" : \"1st batch, 2nd batch\", \"photoUrl\" : \"photoUrl\", \"sellingPrice\" : 100.0, \"buyingPrice\" : 100.0, \"batchId\" : 10, \"sku\" : { \"skuName\" : \"2L, 4L\", \"photoUrl\" : \"photoUrl\", \"productId\" : 10, \"skuId\" : 10, \"status\" : \"ACTIVE\" }, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<BatchResponseDto> <batchId>10</batchId> <batchName>1st batch, 2nd batch</batchName> <buyingPrice>100.0</buyingPrice> <sellingPrice>100.0</sellingPrice> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </BatchResponseDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /batch/{batchId} : Deletes a Batch
     * delete a Batch
     *
     * @param batchId Batch id to delete (required)
     * @param apiKey  (optional)
     * @return Invalid Batch value (status code 400)
     */
    @Operation(
            operationId = "deleteBatch",
            summary = "Deletes a Batch",
            tags = { "batch" },
            responses = {
                    @ApiResponse(responseCode = "400", description = "Invalid Batch value")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/batch/{batchId}"
    )
    default ResponseEntity<Void> deleteBatch(
            @Parameter(name = "batchId", description = "Batch id to delete", required = true) @PathVariable("batchId") Long batchId,
            @Parameter(name = "api_key", description = "") @RequestHeader(value = "api_key", required = false) String apiKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /batch/findByStatus : Finds Batch by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (optional, default to ACTIVE)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
            operationId = "findBatchByStatus",
            summary = "Finds Batch by status",
            tags = { "batch" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = BatchResponseDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = BatchResponseDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid status value")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/batch/findByStatus",
            produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<BatchResponseDto>> findBatchByStatus(
            @Parameter(name = "status", description = "Status values that need to be considered for filter") @Valid @RequestParam(value = "status", required = false, defaultValue = "ACTIVE") String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"batchName\" : \"1st batch, 2nd batch\", \"photoUrl\" : \"photoUrl\", \"sellingPrice\" : 100.0, \"buyingPrice\" : 100.0, \"batchId\" : 10, \"sku\" : { \"skuName\" : \"2L, 4L\", \"photoUrl\" : \"photoUrl\", \"productId\" : 10, \"skuId\" : 10, \"status\" : \"ACTIVE\" }, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<BatchResponseDto> <batchId>10</batchId> <batchName>1st batch, 2nd batch</batchName> <buyingPrice>100.0</buyingPrice> <sellingPrice>100.0</sellingPrice> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </BatchResponseDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /batch/{batchId} : Find Batch by ID
     * Returns a single Batch
     *
     * @param batchId ID of Batch to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Batch not found (status code 404)
     */
    @Operation(
            operationId = "getBatchById",
            summary = "Find Batch by ID",
            tags = { "batch" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = BatchResponseDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = BatchResponseDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
                    @ApiResponse(responseCode = "404", description = "Batch not found")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/batch/{batchId}",
            produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<BatchResponseDto> getBatchById(
            @Parameter(name = "batchId", description = "ID of Batch to return", required = true) @PathVariable("batchId") Long batchId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"batchName\" : \"1st batch, 2nd batch\", \"photoUrl\" : \"photoUrl\", \"sellingPrice\" : 100.0, \"buyingPrice\" : 100.0, \"batchId\" : 10, \"sku\" : { \"skuName\" : \"2L, 4L\", \"photoUrl\" : \"photoUrl\", \"productId\" : 10, \"skuId\" : 10, \"status\" : \"ACTIVE\" }, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<BatchResponseDto> <batchId>10</batchId> <batchName>1st batch, 2nd batch</batchName> <buyingPrice>100.0</buyingPrice> <sellingPrice>100.0</sellingPrice> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </BatchResponseDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /batch : Update an existing Batch
     * Update an existing Batch by Id
     *
     * @param batchDto Update an existent Batch in the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Batch not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
            operationId = "updateBatch",
            summary = "Update an existing Batch",
            tags = { "batch" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = BatchResponseDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = BatchResponseDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
                    @ApiResponse(responseCode = "404", description = "Batch not found"),
                    @ApiResponse(responseCode = "405", description = "Validation exception")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/batch",
            produces = { "application/json", "application/xml" },
            consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<BatchResponseDto> updateBatch(
            @Parameter(name = "BatchDto", description = "Update an existent Batch in the app", required = true) @Valid @RequestBody BatchDto batchDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"batchName\" : \"1st batch, 2nd batch\", \"photoUrl\" : \"photoUrl\", \"sellingPrice\" : 100.0, \"buyingPrice\" : 100.0, \"batchId\" : 10, \"sku\" : { \"skuName\" : \"2L, 4L\", \"photoUrl\" : \"photoUrl\", \"productId\" : 10, \"skuId\" : 10, \"status\" : \"ACTIVE\" }, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<BatchResponseDto> <batchId>10</batchId> <batchName>1st batch, 2nd batch</batchName> <buyingPrice>100.0</buyingPrice> <sellingPrice>100.0</sellingPrice> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </BatchResponseDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /batch/{batchId} : Updates a Batch in the app with form data
     *
     *
     * @param batchId ID of Batch to return (required)
     * @param batchName Name of Batch that needs to be updated (optional)
     * @param buyingPrice Buying Price of Batch that needs to be updated (optional)
     * @param sellingPrice Buying Price of Batch that needs to be updated (optional)
     * @param status Status of Batch that needs to be updated (optional)
     * @return Invalid input (status code 405)
     */
    @Operation(
            operationId = "updateBatchWithForm",
            summary = "Updates a Batch in the app with form data",
            tags = { "batch" },
            responses = {
                    @ApiResponse(responseCode = "405", description = "Invalid input")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/batch/{batchId}"
    )
    default ResponseEntity<Void> updateBatchWithForm(
            @Parameter(name = "batchId", description = "ID of Batch to return", required = true) @PathVariable("batchId") Long batchId,
            @Parameter(name = "batchName", description = "Name of Batch that needs to be updated") @Valid @RequestParam(value = "batchName", required = false) String batchName,
            @Parameter(name = "buyingPrice", description = "Buying Price of Batch that needs to be updated") @Valid @RequestParam(value = "buyingPrice", required = false) Double buyingPrice,
            @Parameter(name = "sellingPrice", description = "Buying Price of Batch that needs to be updated") @Valid @RequestParam(value = "sellingPrice", required = false) Double sellingPrice,
            @Parameter(name = "status", description = "Status of Batch that needs to be updated") @Valid @RequestParam(value = "status", required = false) String status
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
