/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.skyhigh.storeapi.controller;


import com.skyhigh.storeapi.model.dto.ModelApiResponse;
import com.skyhigh.storeapi.model.enums.StoreConfDto;
import com.skyhigh.storeapi.model.dto.StoreDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-17T22:49:14.789018+05:30[Asia/Colombo]")
@Validated
@Tag(name = "store", description = "Access to Store")
public interface StoreApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /store : Add a new Store to the app
     * Add a new Store to the app
     *
     * @param storeDto Create a new Store to the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
            operationId = "addStore",
            summary = "Add a new Store to the app",
            tags = { "store" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = StoreDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = StoreDto.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Invalid input")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @PreAuthorize("hasRole('store-admin')")
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/store",
            produces = { "application/json", "application/xml" },
            consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<StoreDto> addStore(
            @Parameter(name = "StoreDto", description = "Create a new Store to the app", required = true) @Valid @RequestBody StoreDto storeDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"photoUrl\", \"address\" : { \"zip\" : \"94301\", \"country\" : \"Canada\", \"addresLine1\" : \"437 Lytton\", \"addresLine2\" : \"437 Lytton\", \"city\" : \"Palo Alto\", \"state\" : \"CA\", \"addressId\" : 10 }, \"storeName\" : \"Auto Range, MagCity\", \"storeId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<BatchDto> <storeId>10</storeId> <storeName>Auto Range, MagCity</storeName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </BatchDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /store/{storeId} : Deletes a Store
     * delete a Store
     *
     * @param storeId Store id to delete (required)
     * @param apiKey  (optional)
     * @return Invalid Store value (status code 400)
     */
    @Operation(
            operationId = "deleteStore",
            summary = "Deletes a Store",
            tags = { "store" },
            responses = {
                    @ApiResponse(responseCode = "400", description = "Invalid Store value")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/store/{storeId}"
    )
    default ResponseEntity<Void> deleteStore(
            @Parameter(name = "storeId", description = "Store id to delete", required = true) @PathVariable("storeId") Long storeId,
            @Parameter(name = "api_key", description = "") @RequestHeader(value = "api_key", required = false) String apiKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /store/findByStatus : Finds Store by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (optional, default to ACTIVE)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
            operationId = "findStoreByStatus",
            summary = "Finds Store by status",
            tags = { "store" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = StoreDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = StoreDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid status value")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/store/findByStatus",
            produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<StoreDto>> findStoreByStatus(
            @Parameter(name = "status", description = "Status values that need to be considered for filter") @Valid @RequestParam(value = "status", required = false, defaultValue = "ACTIVE") String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"photoUrl\", \"address\" : { \"zip\" : \"94301\", \"country\" : \"Canada\", \"addresLine1\" : \"437 Lytton\", \"addresLine2\" : \"437 Lytton\", \"city\" : \"Palo Alto\", \"state\" : \"CA\", \"addressId\" : 10 }, \"storeName\" : \"Auto Range, MagCity\", \"storeId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<BatchDto> <storeId>10</storeId> <storeName>Auto Range, MagCity</storeName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </BatchDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /store/configurations : Finds Store details
     * Store details from token
     *
     * @return successful operation (status code 200)
     *         or Invalid details (status code 400)
     */
    @Operation(
            operationId = "findStoreDetails",
            summary = "Finds Store details",
            tags = { "store" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = StoreConfDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = StoreConfDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid details")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @PreAuthorize("hasRole('store-admin')")
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/store/configurations",
            produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<StoreConfDto> findStoreDetails(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"additionalConf\" : { \"key\" : { \"property\" : \"property\", \"value\" : true } }, \"store\" : { \"photoUrl\" : \"photoUrl\", \"address\" : { \"zip\" : \"94301\", \"country\" : \"Canada\", \"addresLine1\" : \"437 Lytton\", \"addresLine2\" : \"437 Lytton\", \"city\" : \"Palo Alto\", \"state\" : \"CA\", \"addressId\" : 10 }, \"storeName\" : \"Auto Range, MagCity\", \"storeId\" : 10, \"status\" : \"ACTIVE\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<BatchDto> <additionalConf>UNDEFINED_EXAMPLE_VALUE</additionalConf> </BatchDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /store/{storeId} : Find Store by ID
     * Returns a single Store
     *
     * @param storeId ID of Store to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Store not found (status code 404)
     */
    @Operation(
            operationId = "getStoreById",
            summary = "Find Store by ID",
            tags = { "store" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = StoreDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = StoreDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
                    @ApiResponse(responseCode = "404", description = "Store not found")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/store/{storeId}",
            produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<StoreDto> getStoreById(
            @Parameter(name = "storeId", description = "ID of Store to return", required = true) @PathVariable("storeId") Long storeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"photoUrl\", \"address\" : { \"zip\" : \"94301\", \"country\" : \"Canada\", \"addresLine1\" : \"437 Lytton\", \"addresLine2\" : \"437 Lytton\", \"city\" : \"Palo Alto\", \"state\" : \"CA\", \"addressId\" : 10 }, \"storeName\" : \"Auto Range, MagCity\", \"storeId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<BatchDto> <storeId>10</storeId> <storeName>Auto Range, MagCity</storeName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </BatchDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /store : Update an existing Store
     * Update an existing Store by Id
     *
     * @param storeDto Update an existent Store in the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Store not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
            operationId = "updateStore",
            summary = "Update an existing Store",
            tags = { "store" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = StoreDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = StoreDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
                    @ApiResponse(responseCode = "404", description = "Store not found"),
                    @ApiResponse(responseCode = "405", description = "Validation exception")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/store",
            produces = { "application/json", "application/xml" },
            consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<StoreDto> updateStore(
            @Parameter(name = "StoreDto", description = "Update an existent Store in the app", required = true) @Valid @RequestBody StoreDto storeDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"photoUrl\", \"address\" : { \"zip\" : \"94301\", \"country\" : \"Canada\", \"addresLine1\" : \"437 Lytton\", \"addresLine2\" : \"437 Lytton\", \"city\" : \"Palo Alto\", \"state\" : \"CA\", \"addressId\" : 10 }, \"storeName\" : \"Auto Range, MagCity\", \"storeId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<BatchDto> <storeId>10</storeId> <storeName>Auto Range, MagCity</storeName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </BatchDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /store/{storeId} : Updates a Store in the app with form data
     *
     *
     * @param storeId ID of Store to return (required)
     * @param storeName Name of Store that needs to be updated (optional)
     * @param addressLine1 Address Line1 of Store that needs to be updated (optional)
     * @param addressLine2 Address Line2 of Store that needs to be updated (optional)
     * @param city City of Store that needs to be updated (optional)
     * @param state State of Store that needs to be updated (optional)
     * @param zipCode Zip Code of Batch that needs to be updated (optional)
     * @param country Country of Store that needs to be updated (optional)
     * @param status Status of Store that needs to be updated (optional)
     * @return Invalid input (status code 405)
     */
    @Operation(
            operationId = "updateStoreWithForm",
            summary = "Updates a Store in the app with form data",
            tags = { "store" },
            responses = {
                    @ApiResponse(responseCode = "405", description = "Invalid input")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/store/{storeId}"
    )
    default ResponseEntity<Void> updateStoreWithForm(
            @Parameter(name = "storeId", description = "ID of Store to return", required = true) @PathVariable("storeId") Long storeId,
            @Parameter(name = "storeName", description = "Name of Store that needs to be updated") @Valid @RequestParam(value = "storeName", required = false) String storeName,
            @Parameter(name = "addressLine1", description = "Address Line1 of Store that needs to be updated") @Valid @RequestParam(value = "addressLine1", required = false) String addressLine1,
            @Parameter(name = "addressLine2", description = "Address Line2 of Store that needs to be updated") @Valid @RequestParam(value = "addressLine2", required = false) String addressLine2,
            @Parameter(name = "city", description = "City of Store that needs to be updated") @Valid @RequestParam(value = "city", required = false) String city,
            @Parameter(name = "state", description = "State of Store that needs to be updated") @Valid @RequestParam(value = "state", required = false) String state,
            @Parameter(name = "zipCode", description = "Zip Code of Batch that needs to be updated") @Valid @RequestParam(value = "zipCode", required = false) Long zipCode,
            @Parameter(name = "country", description = "Country of Store that needs to be updated") @Valid @RequestParam(value = "country", required = false) String country,
            @Parameter(name = "status", description = "Status of Store that needs to be updated") @Valid @RequestParam(value = "status", required = false) String status
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /store/{storeId}/uploadImage : uploads an image
     *
     *
     * @param storeId ID of store to update (required)
     * @param additionalMetadata Additional Metadata (optional)
     * @param body  (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
            operationId = "uploadStoreFile",
            summary = "uploads an image",
            tags = { "store" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/store/{storeId}/uploadImage",
            produces = { "application/json" },
            consumes = { "application/octet-stream" }
    )
    default ResponseEntity<ModelApiResponse> uploadStoreFile(
            @Parameter(name = "storeId", description = "ID of store to update", required = true) @PathVariable("storeId") Long storeId,
            @Parameter(name = "additionalMetadata", description = "Additional Metadata") @Valid @RequestParam(value = "additionalMetadata", required = false) String additionalMetadata,
            @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) org.springframework.core.io.Resource body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"type\" : \"type\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
