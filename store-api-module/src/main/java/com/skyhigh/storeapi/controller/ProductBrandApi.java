/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.skyhigh.storeapi.controller;

import com.skyhigh.storeapi.model.dto.ModelApiResponse;
import com.skyhigh.storeapi.model.dto.ProductBrandDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-17T22:49:14.789018+05:30[Asia/Colombo]")
@Validated
@Tag(name = "productBrand", description = "Everything about Product Brand")
public interface ProductBrandApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /productBrand : Add a new Product Brand to the app
     * Add a new Product Brand to the app
     *
     * @param productBrandDto Create a new Product Brand to the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
            operationId = "addProductBrand",
            summary = "Add a new Product Brand to the app",
            tags = { "productBrand" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ProductBrandDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = ProductBrandDto.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Invalid input")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/productBrand",
            produces = { "application/json", "application/xml" },
            consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<ProductBrandDto> addProductBrand(
            @Parameter(name = "ProductBrandDto", description = "Create a new Product Brand to the app", required = true) @Valid @RequestBody ProductBrandDto productBrandDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"Lubricants\", \"brandName\" : \"Lubricants\", \"brandId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<productBrand> <brandId>10</brandId> <brandName>Lubricants</brandName> <photoUrl>Lubricants</photoUrl> <status>aeiou</status> </productBrand>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /productBrand/{brandId} : Deletes a Product Brand
     * delete a Product Brand
     *
     * @param brandId Product Brand id to delete (required)
     * @param apiKey  (optional)
     * @return Invalid Product Brand value (status code 400)
     */
    @Operation(
            operationId = "deleteProductBrand",
            summary = "Deletes a Product Brand",
            tags = { "productBrand" },
            responses = {
                    @ApiResponse(responseCode = "400", description = "Invalid Product Brand value")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/productBrand/{brandId}"
    )
    default ResponseEntity<Void> deleteProductBrand(
            @Parameter(name = "brandId", description = "Product Brand id to delete", required = true) @PathVariable("brandId") Long brandId,
            @Parameter(name = "api_key", description = "") @RequestHeader(value = "api_key", required = false) String apiKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /productBrand/findByStatus : Finds Product Brand by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (optional, default to ACTIVE)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
            operationId = "findProductBrandByStatus",
            summary = "Finds Product Brand by status",
            tags = { "productBrand" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ProductBrandDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = ProductBrandDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid status value")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/productBrand/findByStatus",
            produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<ProductBrandDto>> findProductBrandByStatus(
            @Parameter(name = "status", description = "Status values that need to be considered for filter") @Valid @RequestParam(value = "status", required = false, defaultValue = "ACTIVE") String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"Lubricants\", \"brandName\" : \"Lubricants\", \"brandId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<productBrand> <brandId>10</brandId> <brandName>Lubricants</brandName> <photoUrl>Lubricants</photoUrl> <status>aeiou</status> </productBrand>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /productBrand/{brandId} : Find Product Brand by ID
     * Returns a single Product Brand
     *
     * @param brandId ID of Product Brand to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Product Brand not found (status code 404)
     */
    @Operation(
            operationId = "getProductBrandById",
            summary = "Find Product Brand by ID",
            tags = { "productBrand" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ProductBrandDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = ProductBrandDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
                    @ApiResponse(responseCode = "404", description = "Product Brand not found")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/productBrand/{brandId}",
            produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<ProductBrandDto> getProductBrandById(
            @Parameter(name = "brandId", description = "ID of Product Brand to return", required = true) @PathVariable("brandId") Long brandId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"Lubricants\", \"brandName\" : \"Lubricants\", \"brandId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<productBrand> <brandId>10</brandId> <brandName>Lubricants</brandName> <photoUrl>Lubricants</photoUrl> <status>aeiou</status> </productBrand>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /productBrand : Update an existing Product Brand
     * Update an existing Product Brand by Id
     *
     * @param productBrandDto Update an existent Product Brand in the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Product Brand not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
            operationId = "updateProductBrand",
            summary = "Update an existing Product Brand",
            tags = { "productBrand" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ProductBrandDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = ProductBrandDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
                    @ApiResponse(responseCode = "404", description = "Product Brand not found"),
                    @ApiResponse(responseCode = "405", description = "Validation exception")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/productBrand",
            produces = { "application/json", "application/xml" },
            consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<ProductBrandDto> updateProductBrand(
            @Parameter(name = "ProductBrandDto", description = "Update an existent Product Brand in the app", required = true) @Valid @RequestBody ProductBrandDto productBrandDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"Lubricants\", \"brandName\" : \"Lubricants\", \"brandId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<productBrand> <brandId>10</brandId> <brandName>Lubricants</brandName> <photoUrl>Lubricants</photoUrl> <status>aeiou</status> </productBrand>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /productBrand/{brandId} : Updates a Product Brand in the app with form data
     *
     *
     * @param brandId ID of Product Brand to return (required)
     * @param brandName Name of Product Brand that needs to be updated (optional)
     * @param status Status of Product Brand that needs to be updated (optional)
     * @return Invalid input (status code 405)
     */
    @Operation(
            operationId = "updateProductBrandWithForm",
            summary = "Updates a Product Brand in the app with form data",
            tags = { "productBrand" },
            responses = {
                    @ApiResponse(responseCode = "405", description = "Invalid input")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/productBrand/{brandId}"
    )
    default ResponseEntity<Void> updateProductBrandWithForm(
            @Parameter(name = "brandId", description = "ID of Product Brand to return", required = true) @PathVariable("brandId") Long brandId,
            @Parameter(name = "brandName", description = "Name of Product Brand that needs to be updated") @Valid @RequestParam(value = "brandName", required = false) String brandName,
            @Parameter(name = "status", description = "Status of Product Brand that needs to be updated") @Valid @RequestParam(value = "status", required = false) String status
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /productBrand/{brandId}/uploadImage : uploads an image
     *
     *
     * @param brandId ID of product brand to update (required)
     * @param additionalMetadata Additional Metadata (optional)
     * @param body  (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
            operationId = "uploadProductBrandFile",
            summary = "uploads an image",
            tags = { "productBrand" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/productBrand/{brandId}/uploadImage",
            produces = { "application/json" },
            consumes = { "application/octet-stream" }
    )
    default ResponseEntity<ModelApiResponse> uploadProductBrandFile(
            @Parameter(name = "brandId", description = "ID of product brand to update", required = true) @PathVariable("brandId") Long brandId,
            @Parameter(name = "additionalMetadata", description = "Additional Metadata") @Valid @RequestParam(value = "additionalMetadata", required = false) String additionalMetadata,
            @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) org.springframework.core.io.Resource body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"type\" : \"type\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
