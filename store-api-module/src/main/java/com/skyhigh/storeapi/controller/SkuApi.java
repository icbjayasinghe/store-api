/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.skyhigh.storeapi.controller;

import com.skyhigh.storeapi.model.dto.ModelApiResponse;
import com.skyhigh.storeapi.model.dto.SkuDto;
import com.skyhigh.storeapi.model.dto.SkuResponseDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-16T20:13:57.830681+05:30[Asia/Colombo]")
@Validated
@Tag(name = "sku", description = "Everything about SKU")
public interface SkuApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /sku : Add a new SKU to the app
     * Add a new SKU to the app
     *
     * @param skuDto Create a new SKU to the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addSku",
        summary = "Add a new SKU to the app",
        tags = { "sku" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SkuResponseDto.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = SkuResponseDto.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sku",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<SkuResponseDto> addSku(
        @Parameter(name = "SkuDto", description = "Create a new SKU to the app", required = true) @Valid @RequestBody SkuDto skuDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"skuName\" : \"2L, 4L\", \"photoUrl\" : \"photoUrl\", \"product\" : { \"photoUrl\" : \"photoUrl\", \"productId\" : 10, \"brandId\" : 10, \"productName\" : \"Dot 3, Dot 4\", \"categoryId\" : 10, \"status\" : \"ACTIVE\" }, \"skuId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<skuResponse> <skuId>10</skuId> <skuName>2L, 4L</skuName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </skuResponse>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /sku/{skuId} : Deletes a SKU
     * delete a SKU
     *
     * @param skuId SKU id to delete (required)
     * @param apiKey  (optional)
     * @return Invalid SKU value (status code 400)
     */
    @Operation(
        operationId = "deleteSku",
        summary = "Deletes a SKU",
        tags = { "sku" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid SKU value")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/sku/{skuId}"
    )
    default ResponseEntity<Void> deleteSku(
        @Parameter(name = "skuId", description = "SKU id to delete", required = true) @PathVariable("skuId") Long skuId,
        @Parameter(name = "api_key", description = "") @RequestHeader(value = "api_key", required = false) String apiKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sku/findByStatus : Finds SKU by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (optional, default to ACTIVE)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "findSkuByStatus",
        summary = "Finds SKU by status",
        tags = { "sku" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SkuResponseDto.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = SkuResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sku/findByStatus",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<SkuResponseDto>> findSkuByStatus(
        @Parameter(name = "status", description = "Status values that need to be considered for filter") @Valid @RequestParam(value = "status", required = false, defaultValue = "ACTIVE") String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"skuName\" : \"2L, 4L\", \"photoUrl\" : \"photoUrl\", \"product\" : { \"photoUrl\" : \"photoUrl\", \"productId\" : 10, \"brandId\" : 10, \"productName\" : \"Dot 3, Dot 4\", \"categoryId\" : 10, \"status\" : \"ACTIVE\" }, \"skuId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<skuResponse> <skuId>10</skuId> <skuName>2L, 4L</skuName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </skuResponse>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sku/{skuId} : Find SKU by ID
     * Returns a single SKU
     *
     * @param skuId ID of SKU to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or SKU not found (status code 404)
     */
    @Operation(
        operationId = "getSkuById",
        summary = "Find SKU by ID",
        tags = { "sku" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SkuResponseDto.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = SkuResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "SKU not found")
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sku/{skuId}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<SkuResponseDto> getSkuById(
        @Parameter(name = "skuId", description = "ID of SKU to return", required = true) @PathVariable("skuId") Long skuId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"skuName\" : \"2L, 4L\", \"photoUrl\" : \"photoUrl\", \"product\" : { \"photoUrl\" : \"photoUrl\", \"productId\" : 10, \"brandId\" : 10, \"productName\" : \"Dot 3, Dot 4\", \"categoryId\" : 10, \"status\" : \"ACTIVE\" }, \"skuId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<skuResponse> <skuId>10</skuId> <skuName>2L, 4L</skuName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </skuResponse>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sku : Update an existing SKU
     * Update an existing SKU by Id
     *
     * @param skuDto Update an existent SKU in the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or SKU not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateSku",
        summary = "Update an existing SKU",
        tags = { "sku" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SkuResponseDto.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = SkuResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "SKU not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sku",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<SkuResponseDto> updateSku(
        @Parameter(name = "SkuDto", description = "Update an existent SKU in the app", required = true) @Valid @RequestBody SkuDto skuDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"skuName\" : \"2L, 4L\", \"photoUrl\" : \"photoUrl\", \"product\" : { \"photoUrl\" : \"photoUrl\", \"productId\" : 10, \"brandId\" : 10, \"productName\" : \"Dot 3, Dot 4\", \"categoryId\" : 10, \"status\" : \"ACTIVE\" }, \"skuId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<skuResponse> <skuId>10</skuId> <skuName>2L, 4L</skuName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </skuResponse>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sku/{skuId} : Updates a SKU in the app with form data
     * 
     *
     * @param skuId ID of SKU to return (required)
     * @param skuName Name of Product that needs to be updated (optional)
     * @param status Status of SKU that needs to be updated (optional)
     * @return Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateSkuWithForm",
        summary = "Updates a SKU in the app with form data",
        tags = { "sku" },
        responses = {
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sku/{skuId}"
    )
    default ResponseEntity<Void> updateSkuWithForm(
        @Parameter(name = "skuId", description = "ID of SKU to return", required = true) @PathVariable("skuId") Long skuId,
        @Parameter(name = "skuName", description = "Name of Product that needs to be updated") @Valid @RequestParam(value = "skuName", required = false) String skuName,
        @Parameter(name = "status", description = "Status of SKU that needs to be updated") @Valid @RequestParam(value = "status", required = false) String status
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sku/{skuId}/uploadImage : uploads an image
     * 
     *
     * @param skuId ID of sku to update (required)
     * @param additionalMetadata Additional Metadata (optional)
     * @param body  (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "uploadSkuFile",
        summary = "uploads an image",
        tags = { "sku" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/sku/{skuId}/uploadImage",
        produces = { "application/json" },
        consumes = { "application/octet-stream" }
    )
    default ResponseEntity<ModelApiResponse> uploadSkuFile(
        @Parameter(name = "skuId", description = "ID of sku to update", required = true) @PathVariable("skuId") Long skuId,
        @Parameter(name = "additionalMetadata", description = "Additional Metadata") @Valid @RequestParam(value = "additionalMetadata", required = false) String additionalMetadata,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) org.springframework.core.io.Resource body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"type\" : \"type\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
