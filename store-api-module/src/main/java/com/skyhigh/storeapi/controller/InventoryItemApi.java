/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.skyhigh.storeapi.controller;

import com.skyhigh.storeapi.model.dto.InventoryItemDto;
import com.skyhigh.storeapi.model.dto.InventoryItemResponseDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-17T22:49:14.789018+05:30[Asia/Colombo]")
@Validated
@Tag(name = "inventoryItem", description = "Access to Inventory Item")
public interface InventoryItemApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /inventoryItem : Add a new Inventory Item to the app
     * Add a new Inventory Item to the app
     *
     * @param inventoryItemDto Create a new Inventory Item to the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
            operationId = "addInventoryItem",
            summary = "Add a new Inventory Item to the app",
            tags = { "inventoryItem" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = InventoryItemResponseDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = InventoryItemResponseDto.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Invalid input")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/inventoryItem",
            produces = { "application/json", "application/xml" },
            consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<InventoryItemResponseDto> addInventoryItem(
            @Parameter(name = "InventoryItemDto", description = "Create a new Inventory Item to the app", required = true) @Valid @RequestBody InventoryItemDto inventoryItemDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"inventoryItemId\" : 10, \"quantity\" : 10, \"batch\" : { \"batchName\" : \"1st batch, 2nd batch\", \"photoUrl\" : \"photoUrl\", \"sellingPrice\" : 100.0, \"buyingPrice\" : 100.0, \"batchId\" : 10, \"skuId\" : 10, \"status\" : \"ACTIVE\" }, \"branch\" : { \"branchId\" : 10, \"photoUrl\" : \"photoUrl\", \"address\" : { \"zip\" : \"94301\", \"country\" : \"Canada\", \"addresLine1\" : \"437 Lytton\", \"addresLine2\" : \"437 Lytton\", \"city\" : \"Palo Alto\", \"state\" : \"CA\", \"addressId\" : 10 }, \"branchName\" : \"Branch Toronto\", \"storeId\" : 10, \"status\" : \"ACTIVE\" }, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<InventoryItemResponseDto> <inventoryItemId>10</inventoryItemId> <quantity>10</quantity> <status>aeiou</status> </InventoryItemResponseDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /inventoryItem/{inventoryItemId} : Deletes a Inventory Item
     * delete a Inventory Item
     *
     * @param inventoryItemId Inventory Item id to delete (required)
     * @param apiKey  (optional)
     * @return Invalid Inventory Item value (status code 400)
     */
    @Operation(
            operationId = "deleteInventoryItem",
            summary = "Deletes a Inventory Item",
            tags = { "inventoryItem" },
            responses = {
                    @ApiResponse(responseCode = "400", description = "Invalid Inventory Item value")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/inventoryItem/{inventoryItemId}"
    )
    default ResponseEntity<Void> deleteInventoryItem(
            @Parameter(name = "inventoryItemId", description = "Inventory Item id to delete", required = true) @PathVariable("inventoryItemId") Long inventoryItemId,
            @Parameter(name = "api_key", description = "") @RequestHeader(value = "api_key", required = false) String apiKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /inventoryItem/findByStatus : Finds Inventory Item by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (optional, default to ACTIVE)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
            operationId = "findInventoryItemByStatus",
            summary = "Finds Inventory Item by status",
            tags = { "branch" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = InventoryItemResponseDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = InventoryItemResponseDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid status value")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/inventoryItem/findByStatus",
            produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<InventoryItemResponseDto>> findInventoryItemByStatus(
            @Parameter(name = "status", description = "Status values that need to be considered for filter") @Valid @RequestParam(value = "status", required = false, defaultValue = "ACTIVE") String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"inventoryItemId\" : 10, \"quantity\" : 10, \"batch\" : { \"batchName\" : \"1st batch, 2nd batch\", \"photoUrl\" : \"photoUrl\", \"sellingPrice\" : 100.0, \"buyingPrice\" : 100.0, \"batchId\" : 10, \"skuId\" : 10, \"status\" : \"ACTIVE\" }, \"branch\" : { \"branchId\" : 10, \"photoUrl\" : \"photoUrl\", \"address\" : { \"zip\" : \"94301\", \"country\" : \"Canada\", \"addresLine1\" : \"437 Lytton\", \"addresLine2\" : \"437 Lytton\", \"city\" : \"Palo Alto\", \"state\" : \"CA\", \"addressId\" : 10 }, \"branchName\" : \"Branch Toronto\", \"storeId\" : 10, \"status\" : \"ACTIVE\" }, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<InventoryItemResponseDto> <inventoryItemId>10</inventoryItemId> <quantity>10</quantity> <status>aeiou</status> </InventoryItemResponseDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /inventoryItem/{inventoryItemId} : Find Inventory Item by ID
     * Returns a single Inventory Item
     *
     * @param inventoryItemId ID of Inventory Item to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Inventory Item not found (status code 404)
     */
    @Operation(
            operationId = "getInventoryItemById",
            summary = "Find Inventory Item by ID",
            tags = { "inventoryItem" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = InventoryItemResponseDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = InventoryItemResponseDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
                    @ApiResponse(responseCode = "404", description = "Inventory Item not found")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/inventoryItem/{inventoryItemId}",
            produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<InventoryItemResponseDto> getInventoryItemById(
            @Parameter(name = "inventoryItemId", description = "ID of Inventory Item to return", required = true) @PathVariable("inventoryItemId") Long inventoryItemId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"inventoryItemId\" : 10, \"quantity\" : 10, \"batch\" : { \"batchName\" : \"1st batch, 2nd batch\", \"photoUrl\" : \"photoUrl\", \"sellingPrice\" : 100.0, \"buyingPrice\" : 100.0, \"batchId\" : 10, \"skuId\" : 10, \"status\" : \"ACTIVE\" }, \"branch\" : { \"branchId\" : 10, \"photoUrl\" : \"photoUrl\", \"address\" : { \"zip\" : \"94301\", \"country\" : \"Canada\", \"addresLine1\" : \"437 Lytton\", \"addresLine2\" : \"437 Lytton\", \"city\" : \"Palo Alto\", \"state\" : \"CA\", \"addressId\" : 10 }, \"branchName\" : \"Branch Toronto\", \"storeId\" : 10, \"status\" : \"ACTIVE\" }, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<InventoryItemResponseDto> <inventoryItemId>10</inventoryItemId> <quantity>10</quantity> <status>aeiou</status> </InventoryItemResponseDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /inventoryItem : Update an existing Inventory Item
     * Update an existing Branch by Id
     *
     * @param inventoryItemDto Update an existent Inventory Item in the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Inventory Item not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
            operationId = "updateInventoryItem",
            summary = "Update an existing Inventory Item",
            tags = { "inventoryItem" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = InventoryItemResponseDto.class)),
                            @Content(mediaType = "application/xml", schema = @Schema(implementation = InventoryItemResponseDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
                    @ApiResponse(responseCode = "404", description = "Inventory Item not found"),
                    @ApiResponse(responseCode = "405", description = "Validation exception")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/inventoryItem",
            produces = { "application/json", "application/xml" },
            consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<InventoryItemResponseDto> updateInventoryItem(
            @Parameter(name = "InventoryItemDto", description = "Update an existent Inventory Item in the app", required = true) @Valid @RequestBody InventoryItemDto inventoryItemDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"inventoryItemId\" : 10, \"quantity\" : 10, \"batch\" : { \"batchName\" : \"1st batch, 2nd batch\", \"photoUrl\" : \"photoUrl\", \"sellingPrice\" : 100.0, \"buyingPrice\" : 100.0, \"batchId\" : 10, \"skuId\" : 10, \"status\" : \"ACTIVE\" }, \"branch\" : { \"branchId\" : 10, \"photoUrl\" : \"photoUrl\", \"address\" : { \"zip\" : \"94301\", \"country\" : \"Canada\", \"addresLine1\" : \"437 Lytton\", \"addresLine2\" : \"437 Lytton\", \"city\" : \"Palo Alto\", \"state\" : \"CA\", \"addressId\" : 10 }, \"branchName\" : \"Branch Toronto\", \"storeId\" : 10, \"status\" : \"ACTIVE\" }, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<InventoryItemResponseDto> <inventoryItemId>10</inventoryItemId> <quantity>10</quantity> <status>aeiou</status> </InventoryItemResponseDto>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /inventoryItem/{inventoryItemId} : Updates a Inventory Item in the app with form data
     *
     *
     * @param inventoryItemId ID of Inventory Item to return (required)
     * @param branchId Branch ID of Inventory Item that needs to be updated (required)
     * @param batchId Store ID of Inventory Item that needs to be updated (required)
     * @param quantity Quantity of Inventory Item that needs to be updated (optional)
     * @param status Status of Branch that needs to be updated (optional)
     * @return Invalid input (status code 405)
     */
    @Operation(
            operationId = "updateInventoryItemWithForm",
            summary = "Updates a Inventory Item in the app with form data",
            tags = { "inventoryItem" },
            responses = {
                    @ApiResponse(responseCode = "405", description = "Invalid input")
            },
            security = {
                    @SecurityRequirement(name = "bearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/inventoryItem/{inventoryItemId}"
    )
    default ResponseEntity<Void> updateInventoryItemWithForm(
            @Parameter(name = "inventoryItemId", description = "ID of Inventory Item to return", required = true) @PathVariable("inventoryItemId") Long inventoryItemId,
            @NotNull @Parameter(name = "branchId", description = "Branch ID of Inventory Item that needs to be updated", required = true) @Valid @RequestParam(value = "branchId", required = true) Long branchId,
            @NotNull @Parameter(name = "batch_id", description = "Store ID of Inventory Item that needs to be updated", required = true) @Valid @RequestParam(value = "batch_id", required = true) Long batchId,
            @Parameter(name = "quantity", description = "Quantity of Inventory Item that needs to be updated") @Valid @RequestParam(value = "quantity", required = false) Long quantity,
            @Parameter(name = "status", description = "Status of Branch that needs to be updated") @Valid @RequestParam(value = "status", required = false) String status
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
