/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.skyhigh.storeapi.controller;

import com.skyhigh.storeapi.model.dto.CategoryDto;
import com.skyhigh.storeapi.model.dto.CategoryResponseDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-16T20:13:57.830681+05:30[Asia/Colombo]")
@Validated
@Tag(name = "category", description = "Everything about Category")
public interface CategoryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /category : Add a new Category to the app
     * Add a new Category to the app
     *
     * @param categoryDto Create a new Category to the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "addCategory",
        summary = "Add a new Category to the app",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryResponseDto.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = CategoryResponseDto.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/category",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<CategoryResponseDto> addCategory(
        @Parameter(name = "CategoryDto", description = "Create a new Category to the app", required = true) @Valid @RequestBody CategoryDto categoryDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"photoUrl\", \"parentCategory\" : { \"photoUrl\" : \"Lubricants\", \"name\" : \"Lubricants\", \"parentCategoryId\" : 10, \"status\" : \"ACTIVE\" }, \"categoryName\" : \"Engine Oil, Break Oil\", \"categoryId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<categoryResponse> <categoryId>10</categoryId> <categoryName>Engine Oil, Break Oil</categoryName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </categoryResponse>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /category/{categoryId} : Deletes a category
     * delete a category
     *
     * @param categoryId Category id to delete (required)
     * @param apiKey  (optional)
     * @return Invalid category value (status code 400)
     */
    @Operation(
        operationId = "deleteCategory",
        summary = "Deletes a category",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid category value")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/category/{categoryId}"
    )
    default ResponseEntity<Void> deleteCategory(
        @Parameter(name = "categoryId", description = "Category id to delete", required = true) @PathVariable("categoryId") Long categoryId,
        @Parameter(name = "api_key", description = "") @RequestHeader(value = "api_key", required = false) String apiKey
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /category/findByStatus : Finds Categorys by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (optional, default to ACTIVE)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "findCategoryByStatus",
        summary = "Finds Categorys by status",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryResponseDto.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = CategoryResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/category/findByStatus",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<CategoryResponseDto>> findCategoryByStatus(
        @Parameter(name = "status", description = "Status values that need to be considered for filter") @Valid @RequestParam(value = "status", required = false, defaultValue = "ACTIVE") String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"photoUrl\", \"parentCategory\" : { \"photoUrl\" : \"Lubricants\", \"name\" : \"Lubricants\", \"parentCategoryId\" : 10, \"status\" : \"ACTIVE\" }, \"categoryName\" : \"Engine Oil, Break Oil\", \"categoryId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<categoryResponse> <categoryId>10</categoryId> <categoryName>Engine Oil, Break Oil</categoryName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </categoryResponse>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /category/{categoryId} : Find Category by ID
     * Returns a single Category
     *
     * @param categoryId ID of Category to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Category not found (status code 404)
     */
    @Operation(
        operationId = "getCategoryById",
        summary = "Find Category by ID",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryResponseDto.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = CategoryResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Category not found")
        },
        security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/category/{categoryId}",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<CategoryResponseDto> getCategoryById(
        @Parameter(name = "categoryId", description = "ID of Category to return", required = true) @PathVariable("categoryId") Long categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"photoUrl\", \"parentCategory\" : { \"photoUrl\" : \"Lubricants\", \"name\" : \"Lubricants\", \"parentCategoryId\" : 10, \"status\" : \"ACTIVE\" }, \"categoryName\" : \"Engine Oil, Break Oil\", \"categoryId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<categoryResponse> <categoryId>10</categoryId> <categoryName>Engine Oil, Break Oil</categoryName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </categoryResponse>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /category : Update an existing Category
     * Update an existing Category by Id
     *
     * @param categoryDto Update an existent Category in the app (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Category not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateCategory",
        summary = "Update an existing Category",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CategoryResponseDto.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = CategoryResponseDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Category not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/category",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<CategoryResponseDto> updateCategory(
        @Parameter(name = "CategoryDto", description = "Update an existent Category in the app", required = true) @Valid @RequestBody CategoryDto categoryDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"photoUrl\" : \"photoUrl\", \"parentCategory\" : { \"photoUrl\" : \"Lubricants\", \"name\" : \"Lubricants\", \"parentCategoryId\" : 10, \"status\" : \"ACTIVE\" }, \"categoryName\" : \"Engine Oil, Break Oil\", \"categoryId\" : 10, \"status\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<categoryResponse> <categoryId>10</categoryId> <categoryName>Engine Oil, Break Oil</categoryName> <photoUrl>aeiou</photoUrl> <status>aeiou</status> </categoryResponse>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /category/{categoryId} : Updates a category in the app with form data
     * 
     *
     * @param categoryId ID of Parent Category to return (required)
     * @param name Name of category that needs to be updated (optional)
     * @param status Status of category that needs to be updated (optional)
     * @return Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateCategoryWithForm",
        summary = "Updates a category in the app with form data",
        tags = { "category" },
        responses = {
            @ApiResponse(responseCode = "405", description = "Invalid input")
        },
        security = {
            @SecurityRequirement(name = "store_auth", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/category/{categoryId}"
    )
    default ResponseEntity<Void> updateCategoryWithForm(
        @Parameter(name = "categoryId", description = "ID of Parent Category to return", required = true) @PathVariable("categoryId") Long categoryId,
        @Parameter(name = "name", description = "Name of category that needs to be updated") @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "status", description = "Status of category that needs to be updated") @Valid @RequestParam(value = "status", required = false) String status
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
